library auth_widget_builder;

import 'package:flutter/material.dart';
import 'package:general_widgets/general_widgets.dart';
import 'package:provider/provider.dart';
import 'package:provider/single_child_widget.dart';

/// Used to create user-dependent objects that need to be accessible by all widgets.
/// This widgets should live above the [MaterialApp].
/// See [AuthWidget], a descendant widget that consumes the snapshot generated by this builder.
/// Notes:
/// Accepts a generic type parameter <T> which is used to define the type of the
/// user model that the authentication stream returns.
/// The generic dart type variables E, T, S, K and V can be passed to a function
/// or class using the triangle bracket <> notation. This allows all functions
/// and varaibles within to have access to the passed type.
class AuthWidgetBuilder<T> extends StatelessWidget {
  final Widget Function(BuildContext, AsyncSnapshot<T>) builder;
  final Stream<T> authStream;
  final List<SingleChildWidget> Function(BuildContext, AsyncSnapshot<T>)
      userProvidersBuilder;

  const AuthWidgetBuilder({
    Key key,
    @required this.builder,
    @required this.authStream,
    this.userProvidersBuilder,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return StreamBuilder<T>(
      stream: authStream,
      builder: (context, snapshot) {
        if (snapshot.data != null) {
          return MultiProvider(
            providers: userProvidersBuilder != null
                ? userProvidersBuilder(context, snapshot)
                : [],
            child: builder(context, snapshot),
          );
        }
        return builder(context, snapshot);
      },
    );
  }
}

/// Builds the signed-in or non signed-in UI, depending on the user snapshot.
/// Abstracting this logic away from the [AuthWidgetBuilder] allows other ui
/// elements / widgets to sit above the [AuthWidget].
/// An [AuthWidgetBuilder] ancestor is required for this widget to work.
class AuthWidget extends StatelessWidget {
  final AsyncSnapshot userSnapshot;
  final WidgetBuilder nonSignedInBuilder;
  final WidgetBuilder signedInBuilder;
  final Function signOut;

  const AuthWidget({
    Key key,
    @required this.userSnapshot,
    @required this.signedInBuilder,
    @required this.nonSignedInBuilder,
    @required this.signOut,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    // only attempt to load main interface after response is recieved from
    // authentication service to prevent loading the user sign in, then
    // reloading the application
    if (userSnapshot.connectionState == ConnectionState.active) {
      // user has been authentication onto the system with authentication service
      if (userSnapshot.hasData == true) {
        return signedInBuilder(context);
      }
      return nonSignedInBuilder(context);
    }
    // pending authentication connection screen in case of errors with auth
    // service availability
    return Awaiting(
      footerTextOnTap: signOut,
    );
  }
}
