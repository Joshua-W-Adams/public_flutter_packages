library auth_widget_builder;

import 'package:flutter/gestures.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:provider/single_child_widget.dart';

/// Used to create user-dependent objects that need to be accessible by all widgets.
/// This widgets should live above the [MaterialApp].
/// See [AuthWidget], a descendant widget that consumes the snapshot generated by this builder.
/// Notes:
/// Accepts a generic type parameter <T> which is used to define the type of the
/// user model that the authentication stream returns.
/// The generic dart type variables E, T, S, K and V can be passed to a function
/// or class using the triangle bracket <> notation. This allows all functions
/// and varaibles within to have access to the passed type.
class AuthWidgetBuilder<T> extends StatelessWidget {
  final Widget Function(BuildContext, AsyncSnapshot<T>) builder;
  final Stream<T> authStream;
  final List<SingleChildWidget> Function(BuildContext, T) userProvidersBuilder;

  const AuthWidgetBuilder({
    Key key,
    @required this.builder,
    @required this.authStream,
    this.userProvidersBuilder,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return StreamBuilder<T>(
      stream: authStream,
      builder: (context, snapshot) {
        final T user = snapshot.data;
        if (user != null) {
          return MultiProvider(
            providers: userProvidersBuilder != null
                ? userProvidersBuilder(context, user)
                : [],
            child: builder(context, snapshot),
          );
        }
        return builder(context, snapshot);
      },
    );
  }
}

typedef EmailVerificationFunction = bool Function<T>(T user);

/// Builds the signed-in or non signed-in UI, depending on the user snapshot.
/// This widget should be below the [MaterialApp].
/// An [AuthWidgetBuilder] ancestor is required for this widget to work.
class AuthWidget<T> extends StatelessWidget {
  final AsyncSnapshot<T> userSnapshot;
  final WidgetBuilder nonSignedInBuilder;
  final WidgetBuilder signedInBuilder;
  final EmailVerificationFunction emailVerificationFunction;
  final WidgetBuilder emailVerificationBuilder;
  final Function signOut;

  const AuthWidget({
    Key key,
    @required this.userSnapshot,
    @required this.signedInBuilder,
    @required this.nonSignedInBuilder,
    @required this.emailVerificationFunction,
    @required this.emailVerificationBuilder,
    @required this.signOut,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    // only attempt to load main interface after response is recieved from
    // authentication service to prevent loading the user sign in, then
    // reloading the application
    if (userSnapshot.connectionState == ConnectionState.active) {
      // user has been authentication onto the system with authentication service
      if (userSnapshot.hasData == true) {
        // confirm if email verification check is required
        bool _emailVerfied = emailVerificationFunction(userSnapshot.data);
        if (_emailVerfied) {
          return emailVerificationBuilder(context);
        } else {
          return signedInBuilder(context);
        }
      }
      return nonSignedInBuilder(context);
    }
    // pending authentication connection screen in case of errors with auth
    // service availability
    return AwaitingAuthentication(signOut: signOut);
  }
}

class AwaitingAuthentication extends StatelessWidget {
  final Function signOut;

  AwaitingAuthentication({
    @required this.signOut,
  });

  @override
  Widget build(BuildContext context) {
    return Directionality(
      textDirection: TextDirection.ltr,
      child: Center(
        child: Column(
          mainAxisSize: MainAxisSize.max,
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Padding(
              padding: const EdgeInsets.only(
                top: 32.0,
                bottom: 32.0,
              ),
              child: Text(
                'Loading...',
                style: TextStyle(
                  fontSize: 15,
                  fontWeight: FontWeight.bold,
                  color: Colors.black54,
                ),
              ),
            ),
            CircularProgressIndicator(),
            // if for some reason the auth service is down and a user object
            // is not returned. Allow user to return to the login page and
            // try again.
            Align(
              alignment: Alignment.bottomCenter,
              child: Padding(
                padding: const EdgeInsets.only(
                  top: 32.0,
                  bottom: 32.0,
                ),
                child: RichText(
                  text: TextSpan(
                    text: 'Go To Login Page',
                    style: TextStyle(
                      fontWeight: FontWeight.bold,
                      color: Colors.blue[600],
                    ),
                    recognizer: TapGestureRecognizer()
                      ..onTap = () {
                        if (signOut != null) {
                          signOut();
                        }
                      },
                  ),
                ),
              ),
            )
          ],
        ),
      ),
    );
  }
}
